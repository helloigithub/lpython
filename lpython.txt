dir(__builtins__)
isinstance(20,int)
type('hello world')
import random
random.randint(1,10)
small = x if x < y else y
number.append('helloworld')
member.extend(['hello','world'])
member.insert(0,'helloworld')
member.remove('helloworld')
del member[1]
del member
member.pop()
member[1:3]
member.count('helloworld')
member.index('helloworld',3,7)
member.reverse()
member.sort(reverse=True)
member = number
member = number[:]
tumple2 = tumple2[:2] + (1,) + tumple2[2:]
str2.capitalize()   //把字符串第一个字符改为大写。
casefold()			//把整个字符串的所有字符改为小写。
center(width)		//将字符串居中，并使用空格填充至长度width的新字符串。
count(sub[,start[,end]])		//返回sub在字符串里边出现的次数，start和end参数表示范围，可选。
encode(encoding='utf-8',errors='strict')		//以encoding指定的编码格式对字符串进行编码。
endswith(sub[,start[,end]])		//检查字符串是否以sub子字符串结束，如果是返回True，否则返回False。
expandtabs([tabsize=8])		//把字符串中的tab符号\t转换为空格，如不指定参数，默认空格数是tabsize=8。
find(sub[,start[,end]])		//检查sub是否包含在字符串中，如果有则返回索引值，否则返回-1，start和end参数表示范围，可选。
index(sub[,start[,end]])		//跟find方法一样，不过如果sub不在string中会产生一个异常。
isalnum()		//如果字符串至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False。
isalpha()		//如果字符串至少有一个字符并且所有字符都是字母则返回True，否则返回False。
isdecimal()		//如果字符串只包含十进制数字则返回True，否则返回False。
isdigit()		//如果字符串只包含数字则返回True，否则返回False。
islower()		//如果字符串中字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回True，否则返回False。
isnumeric()		//如果字符串中只包含数字字符，则返回True，否则返回False。
isspace()		//如果字符串中只包含空格，则返回True，否则返回False。
istitle()		//如果字符串是标题化（所有单词都以大写开始，其余字母均小写），则返回True，否则返回False。
isupper()		//如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回True，否则返回False。
join(sub)		//以字符串作为分隔符，插入到sub中所有的字符之间。
ljust(width)		//返回一个左对齐的字符串，并使用空格填充至长度为width的新字符串。
lower()		//转换字符串中所有大写字符为小写。
lstrip()		//去掉字符串左边的所有空格。
partition(sub)		//找到子字符串sub，把字符串分成一个3元组(pre_sub,sub,fol_sun)，如果字符串中不包含sub则返回('原字符串',' ',' ')。
replace(old,new[,count])		//把字符串中的old子字符串替换成new子字符串，如果count指定,则替换不超过count次。
rfind(sub[,start[,end]])		//类似于find()方法，不过是从右边开始查找。
rindex(sub[,start[,end]])		//从右往左。
rjust(width)		//从右往左。
rpartition(sub)		//从右往左。
rstrip()		//删除字符串末尾的空格。
split(sep=None,maxsplit=-1)		//不带参数默认是以空格为分隔符切片字符串，如果maxsplit参数有设置，则仅分隔maxsplit个子字符串，返回切片后的子字符串拼接的列表。
splitlines(([keepends]))		//按照\n分隔，返回一个包含各行作为元素的列表，如果keepends参数指定，则返回keepends行。
startswith(prefix[,start[,end]])		//检查字符串是否以prefix开头，是则返回True，否则返回False，start和end参数可以指定范围检查，可选。
strip([chars])		//删除字符串前边和后边的空格，chars参数可以定制删除的字符，可选。
swapcase()		//翻转字符串中的大小写。
title()		//返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。
translate(table)		//根据table的规则（可以由str.maketrans('a','b')定制）转换字符串中的字符。
upper()		//转换字符串中的所有小写字符为大写。
zfill(width)		//返回长度为width的字符串，原字符串右对齐，前边用0填充。
"{0} {1}".format("hello", "world")
"{a} {b}".format(a="hello", b="world")
"{{0}}"
"%c %c" % (65,66)
list()
tuple()
str()
max()	//参数数据类型应一致
min()	//参数数据类型应一致
sum(iterable[,start=0])		//返回序列iterable和可选参数start的总和
sorted()		//从小到大排列
reversed()
enumerate()		//枚举
zip()
print.__doc__
def MyFirstFunction(*temp):
global
nonlocal
g = lambda x,y:x+y
filter(lambda x: x % 2, range(10))
map(lambda x : x*2, range(10))
dict1 = {1:'hello world', 2:'hello',3:'world'}
dict(((1,'one'),(2,'two')))
dict(1='one',2='two')
dict1.fromkeys((1,2,3),'number')
dict1.keys()
dict1.values()
dict1.items()
dict1.get(100,'None')
dict1.clear()
dict1.copy()
dict1.pop(1)
dict1.popitem()
dict1.setdefault(5,'hello world')
dict1.update(dict2)
set()
set1.remove(1)
set1.add(1)
set1 = frozenset(['hello world'])
'r'		//以只读方式打开啊文件（默认）
'w'		//以写入的方式打开文件，会覆盖已存在的文件
'x'		//如果文件已经存在，使用此模式打开将引发异常
'a'		//以写入模式打开，如果文件存在，则在末尾追加写入
'b'		//以二进制模式打开文件
't'		//以文本模式打开（默认）
'+'		//可读写模式（可添加到其他模式中使用）
'U'		//通用换行符支持
f = open('hello.txt','a')
f.close		//关闭文件
f.read(size = -1)		//从文件读取size个字符，当未给定size或给定复值得时候，读取剩余的所有字符，然后作为字符串返回
f.readline()		//以写入模式打开，如果文件存在，则在末尾追加写入
f.write(str)		//将字符串str写入文件
f.writelines(seq)		//向文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象
f.seek(offset,from)		//在文件中移动指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节
f.tell()		//返回当前在文件中 的位置
import os
getcwd()	//返回当前工作目录
chdir(path)		//改变工作目录
listdir(path='.')		//列举指定目录中的文件名（'.'表示当前目录，'..'表示上一级目录）
mkdir(path)		//创建单层目录，如该目录已存在抛出异常
makedirs(path)		//递归创建多层目录，如该目录已存在抛出异常
remove(path)		//删除文件
rmdir(path)		//删除单层目录，如该目录非空则抛出异常
removedirs(path)	//递归删除目录，从子目录到父目录逐层尝试删除，遇到非空则抛出异常
rename(old,new)		//将old重命名为new
system(command)		//运行系统的shell命令
os.curdir		//指代当前目录
os.pardir		//指代上一级目录
os.sep			//输出操作系统特定的路径分隔符（Win下为\\，linux为/）
os.linesep		//当前平台使用的行终止符（win下为\r\n,linux下为\n）
os.name			//指代当前使用的操作系统（包括：'posix' 'nt' 'mac' 'os2' 'ce' 'jave'）
os.path.basename(path)		//去掉目录路径，单独返回文件名
os.path.dirname(path)		//去掉文件名，单独返回目录路径
os.path.join(path1[,path2[,...]])		//将path1 path2各部分组合成一个路径名
os.path.split(path)		//分割文件名与路径，返回（f_path,f_name）元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且
							不会判断文件或目录是否存在
os.path.splitext(path)		//分离文件名与拓展名，返回（f_name,f_extension）元组
os.path.getsize(file)		//返回指定文件的尺寸，单位是字节
os.path.getatime(file)		//返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtim()函数换算）
os.path.getctime(file)		//返回指定文件的创建时间
os.path.getmtime(file)		//返回指定文件最新的修改时间
os.path.exists(path)		//判断指定路径是否存在
os.path.isabs(path)			//判断指定路径是否是绝对路径
os.path.isdir(path)		//判断指定路径是否存在且是一个目录
os.path.isfile(path)		//判断指定路径是否存在且是一个文件
os.path.islink(path)		//判断指定路径是否存在且是一个符号链接
os.path.ismount(path)		//判断指定路径是否存在一个挂载点
os.path.samefile(path1,path2)		//判断path1和path2两个路径是否指向同一个文件
import pickle
pickle.dump(dict1,pickle_file)
dict1 = pickle.load(pickle_file)